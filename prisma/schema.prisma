// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @unique
  username     String         @unique
  createdAt    DateTime       @default(now())
  profileImage String
  reviews      Review[]
  listening    Listening[]
  listened     Listened[]
  wantToListen WantToListen[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  body      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Album     Album    @relation(fields: [albumId], references: [uri])
  albumId   String
  rating    Float
}

model Album {
  uri          String         @id @unique
  title        String
  artist       String
  genre        String?
  year         Int?
  reviews      Review[]
  listening    Listening[]
  listened     Listened[]
  wantToListen WantToListen[]
  images       Image[]
}

model Image {
  id      Int    @id @default(autoincrement())
  url     String
  height  Int
  width   Int
  Album   Album  @relation(fields: [albumId], references: [uri])
  albumId String
}

model Listening {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  artist    String
  album     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Album     Album?   @relation(fields: [albumUri], references: [uri])
  albumUri  String?
}

model Listened {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  artist    String
  album     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Album     Album?   @relation(fields: [albumUri], references: [uri])
  albumUri  String?
}

model WantToListen {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  artist    String
  album     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Album     Album?   @relation(fields: [albumUri], references: [uri])
  albumUri  String?
}
