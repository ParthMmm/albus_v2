// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @unique
  username         String             @unique
  createdAt        DateTime           @default(now())
  profileImage     String
  bio              String?
  reviews          Review[]
  listening        Listening[]
  listened         Listened[]
  wantToListen     WantToListen[]
  spotifyAccount    String?  @default("")
  lastFmAccount     String?  @default("")
  soundCloudAccount String?  @default("")
  twitterAccount    String?  @default("")
  // favoriteTracks FavoriteTrack[]
}



model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Album     Album    @relation(fields: [albumId], references: [spotifyId])
  albumId   String
  rating    Float
  // favoriteTracks FavoriteTrack[]
}

model Album {
  id           String         @id @default(cuid())
  uri          String         @unique
  spotifyId    String         @unique
  title        String
  genre        String?
  year         Int?
  reviews      Review[]
  listening    Listening[]
  listened     Listened[]
  wantToListen WantToListen[]
  images       Image[]
  tracks       Track[]
  artists      Artist[]
}

model Artist {
  id        String  @id @default(cuid())
  uri       String  @unique
  spotifyId String  @unique
  name      String
  albums    Album[]
  tracks    Track[]
}

// model FavoriteTrack {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   track     Track    @relation(fields: [trackId], references: [id])
//   trackId   String
//   // user      User     @relation(fields: [userId], references: [id])
//   // userId    String
//   Review    Review?  @relation(fields: [reviewId], references: [id])
//   reviewId  String?
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
// }

model Track {
  id         String   @id @default(cuid())
  uri        String   @unique
  spotifyId  String   @unique
  title      String
  trackNum   Int
  duration   Int
  previewUrl String?
  album      Album    @relation(fields: [albumId], references: [spotifyId])
  albumId    String
  // favorites  FavoriteTrack[]
  artists    Artist[]
}

model Image {
  id      String @id @default(cuid())
  url     String
  height  Int
  width   Int
  album   Album  @relation(fields: [albumId], references: [spotifyId])
  albumId String
}

model Listening {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  album     Album    @relation(fields: [albumId], references: [spotifyId])
  albumId   String
}

model Listened {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  album     Album    @relation(fields: [albumId], references: [spotifyId])
  albumId   String
}

model WantToListen {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  album     Album    @relation(fields: [albumId], references: [spotifyId])
  albumId   String
}
